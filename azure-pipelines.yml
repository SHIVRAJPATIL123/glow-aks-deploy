trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

variables:
- group: TerraformWorkloadIdentity  # Includes AZURE_CLIENT_ID, etc.
- name: ARM_CLIENT_ID
  value: $(AZURE_CLIENT_ID)
- name: ARM_SUBSCRIPTION_ID
  value: $(AZURE_SUBSCRIPTION_ID)
- name: ARM_TENANT_ID
  value: $(AZURE_TENANT_ID)
- name: ARM_USE_OIDC
  value: "true"

stages:
- stage: TerraformInitPlan
  displayName: 'Terraform Init and Plan'
  jobs:
  - job: InitAndPlan
    displayName: 'Terraform Init and Plan Job'
    steps:
    - checkout: self

    - task: TerraformInstaller@1
      displayName: 'Install Terraform CLI'
      inputs:
        terraformVersion: '1.5.7'

    - task: Bash@3
      displayName: 'Terraform Init'
      inputs:
        targetType: 'inline'
        workingDirectory: '$(Build.SourcesDirectory)'
        script: |
          terraform init

    - task: Bash@3
      displayName: 'Terraform Plan'
      inputs:
        targetType: 'inline'
        workingDirectory: '$(Build.SourcesDirectory)'
        script: |
          terraform plan -out=tfplan

- stage: TerraformApply
  displayName: 'Terraform Apply with Manual Approval'
  dependsOn: TerraformInitPlan
  condition: succeeded()
  jobs:
  - deployment: ApplyJob
    displayName: 'Apply Terraform Job'
    environment: 'dev-apply'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self

          - task: TerraformInstaller@1
            displayName: 'Install Terraform CLI'
            inputs:
              terraformVersion: '1.5.7'

          - task: Bash@3
            displayName: 'Terraform Apply'
            inputs:
              targetType: 'inline'
              workingDirectory: '$(Build.SourcesDirectory)'
              script: |
                terraform apply -auto-approve tfplan
